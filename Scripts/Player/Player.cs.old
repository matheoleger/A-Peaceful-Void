using Godot;
using System;

public partial class Player : RigidBody3D
{
	public const float Speed = 5.0f;
	public const float JumpVelocity = 4.5f;

	// Get the gravity from the project settings to be synced with RigidBody nodes.
	public float gravity = ProjectSettings.GetSetting("physics/3d/default_gravity").AsSingle();

	private Vector3 gravityDirection;

	private Node3D neck;
	private Camera3D camera;

	public override void _Ready()
	{
		neck = GetNode<Node3D>("Neck");
		camera = GetNode<Camera3D>("Neck/Camera3D"); 

		GameManager.instance.player = this;
	}

	public override void _UnhandledInput(InputEvent inputEvent)
	{
		if(inputEvent is InputEventMouseButton)
		{
			Input.MouseMode = Input.MouseModeEnum.Captured;
		} 
		else if (inputEvent.IsActionPressed("ui_cancel"))
		{
			Input.MouseMode = Input.MouseModeEnum.Visible;
		}

		if(Input.MouseMode == Input.MouseModeEnum.Captured && inputEvent is InputEventMouseMotion)
		{
			InputEventMouseMotion mouseMotion = (InputEventMouseMotion)inputEvent;
			neck.RotateY(-mouseMotion.Relative.X * 0.01f);
			camera.RotateX(-mouseMotion.Relative.Y * 0.01f);

			Vector3 rotation = new Vector3();

			rotation.X = (float)Math.Clamp(camera.Rotation.X, (Math.PI / 180) * -60, (Math.PI / 180) * 60);

			camera.Rotation = rotation;
		}
	}

	private void SetGravityDirection()
	{
		gravityDirection = (GameManager.instance.currentPlayerCelestialBody.GlobalTransform.Origin - GlobalTransform.Origin).Normalized();
	}

	public override void _PhysicsProcess(double delta)
	{
		// SetGravityDirection();

		// Transform3D transform = Transform;
		// transform.Basis.Y = -gravityDirection;
		// Transform = transform;

		// // Vector3 velocity = Velocity;

		// // Add the gravity.
		// // if (!IsOnFloor()) {
		// // 	// velocity.Y -= gravity * (float)delta;
		// // 	// velocity.Y -= gravityDirection.Y * (float)delta;
		// // 	velocity.Y -= gravityDirection.Y;
		// // }

		// // velocity.Y -= GameManager.instance.currentPlayerCelestialBody.gravityForce * (float)delta;


		// // Handle Jump.
		// // if (Input.IsActionJustPressed("ui_accept") && IsOnFloor())
		// // 	velocity.Y = JumpVelocity;

		// // Get the input direction and handle the movement/deceleration.
		// // As good practice, you should replace UI actions with custom gameplay actions.
		// Vector2 inputDir = Input.GetVector("left", "right", "forward", "back");

		// float inputDirX = Input.GetActionStrength("left") - Input.GetActionStrength("right");
		// float inputDirZ = Input.GetActionStrength("back") - Input.GetActionStrength("forward");

		// Vector3 direction = (neck.Transform.Basis * new Vector3(inputDir.X, 0, inputDir.Y)).Normalized();


		// if(!IsOnFloor())
		// 	direction.Y = -GameManager.instance.currentPlayerCelestialBody.gravityForce * (float) delta;
		// else
		// 	direction.Y = 0;

		// if (direction != Vector3.Zero)
		// {
		// 	// velocity.X = direction.X * Speed;
		// 	// velocity.Z = direction.Z * Speed;
		// 	ApplyForce(new Vector3(direction.X*Speed, direction.Y, direction.Z*Speed));
		// }
		// else
		// {
		// 	// velocity.X = Mathf.MoveToward(Velocity.X, 0, Speed);
		// 	// velocity.Z = Mathf.MoveToward(Velocity.Z, 0, Speed);
		// 	ApplyCentralForce(direction);
		// }

		// AddConstantCentralForce(direction);
		// ApplyCentralForce(direction);

		// Velocity = velocity;
		// MoveAndSlide();

		// ApplyForce(direction);
	}

	public override void _IntegrateForces(PhysicsDirectBodyState3D state)
	{
		SetGravityDirection();

		Transform3D transform = Transform;
		transform.Basis.Y = -gravityDirection;
		Transform = transform;

		// Vector3 velocity = Velocity;

		// Add the gravity.
		// if (!IsOnFloor()) {
		// 	// velocity.Y -= gravity * (float)delta;
		// 	// velocity.Y -= gravityDirection.Y * (float)delta;
		// 	velocity.Y -= gravityDirection.Y;
		// }

		// velocity.Y -= GameManager.instance.currentPlayerCelestialBody.gravityForce * (float)delta;


		// Handle Jump.
		// if (Input.IsActionJustPressed("ui_accept") && IsOnFloor())
		// 	velocity.Y = JumpVelocity;

		// Get the input direction and handle the movement/deceleration.
		// As good practice, you should replace UI actions with custom gameplay actions.
		Vector2 inputDir = Input.GetVector("left", "right", "forward", "back");

		float inputDirX = Input.GetActionStrength("left") - Input.GetActionStrength("right");
		float inputDirZ = Input.GetActionStrength("back") - Input.GetActionStrength("forward");

		Vector3 direction = (neck.Transform.Basis * new Vector3(inputDir.X, 0, inputDir.Y)).Normalized();


		if(!IsOnFloor(state))
			direction.Y = -GameManager.instance.currentPlayerCelestialBody.gravityForce;
		else
			direction.Y = 0;
		
		ApplyForce(direction);
	}

	private bool IsOnFloor(PhysicsDirectBodyState3D state)
	{

		for(int i = 0; i < state.GetContactCount(); i++)
		{
			Vector3 contactNormal = state.GetContactLocalNormal(i);

			if(contactNormal.Dot(-gravityDirection) >= 0.5f)
			{
				GD.Print("TRUE");
				return true;
			}
		}

		// GD.Print("FALSE");

		return false;
	}
}
